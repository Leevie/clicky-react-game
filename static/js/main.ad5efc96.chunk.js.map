{"version":3,"sources":["images/black_panther.jpg","images/black_widow.jpg","images/captain_america.jpg","images/groot.jpg","images/hulk.jpg","images/iron_man.jpg","images/loki.jpg","images/nick_fury.jpg","images/rocket.jpg","images/spider_man.jpg","images/thor.jpg","images/vision.jpg","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Character_Character","key","Footer","Banner","Images","black_panther","black_widow","captain_america","groot","hulk","iron_man","loki","nick_fury","rocket","spider_man","thor","vision","ClickyGame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","components_ClickyGame","document","getElementById"],"mappings":"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","file":"static/js/main.ad5efc96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black_panther.c5020403.jpg\";","module.exports = __webpack_public_path__ + \"static/media/black_widow.32a75e18.jpg\";","module.exports = __webpack_public_path__ + \"static/media/captain_america.d8c1c878.jpg\";","module.exports = __webpack_public_path__ + \"static/media/groot.0a37f77b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hulk.1c52f5fa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iron_man.256933b8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/loki.a9025e54.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nick_fury.e7306ad3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rocket.12d85e0b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spider_man.57dad451.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thor.42ccda40.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vision.287952e2.jpg\";","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport './Character.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst Character = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default Character;\n","import React from 'react';\nimport './Container.css';\nimport Character from '../Character';\n\n// main container for each Character component\n// loops through each index in props.characters, which contains an array of character images\n// to create a new Character component for each image\n// attaches the passed down clickEvent function to each Character component\nconst Container = props => (\n  // loops through\n  <div\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n  >\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => <div className=\"footer text-center\"></div>;\n\nexport default Footer;\n","import React from 'react';\nimport './Banner.css';\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">Click on an image to earn points, but don't click on any more than once!</p>\n  </div>\n);\n\nexport default Banner;\n","import black_panther from './images/black_panther.jpg';\nimport black_widow from './images/black_widow.jpg';\nimport captain_america from './images/captain_america.jpg';\nimport groot from './images/groot.jpg';\nimport hulk from './images/hulk.jpg';\nimport iron_man from './images/iron_man.jpg';\nimport loki from './images/loki.jpg';\nimport nick_fury from './images/nick_fury.jpg';\nimport rocket from './images/rocket.jpg';\nimport spider_man from './images/spider_man.jpg';\nimport thor from './images/thor.jpg';\nimport vision from './images/vision.jpg';\n\nconst Images = [\n  black_panther,\n  black_widow,\n  captain_america,\n  groot,\n  hulk,\n  iron_man,\n  loki,\n  nick_fury,\n  rocket,\n  spider_man,\n  thor,\n  vision \n];\n\nexport default Images\n\n\n// The code below works in Node, but not React -- need to find a replacement.\n/* \nvar walkSync = function(dir, filelist) {\n    var fs = fs || require('fs'),\n        files = fs.readdirSync(dir);\n    filelist = filelist || [];\n    files.forEach(function(file) {\n      if (fs.statSync(dir + '/' + file).isDirectory()) {\n        filelist = walkSync(dir + '/' + file, filelist);\n      }\n      else {\n        filelist.push(file);\n      }\n    });\n    return filelist;\n  };\n\nconsole.log(walkSync(\"images\"));\n*/\n","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport Images from '../images';\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: '',\n\n    // contains intro, success, and failure message\n    navMessage: 'Click an image to begin!',\n\n    // contains an array of image urls\n    allCharacters: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = Images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        if (highScore === 12) {\n          score=0;\n          highScore= 0;\n\n          return this.setState({\n            score: score,\n            highScore: highScore,\n            navMsgColor: 'correct',\n            navMessage: 'YOU WIN THE GAME!!',\n            allCharacters: shuffled,\n            wasClicked: [],\n            shake: false\n          });\n\n        }\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}